{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction initMap() {\n  let Google = \"Something\";\n  const chicago = new google.maps.LatLng(41.85, -87.65);\n  const map = new google.maps.Map(document.getElementById(\"map\"), {\n    center: chicago,\n    zoom: 3\n  });\n  const coordInfoWindow = new google.maps.InfoWindow();\n  coordInfoWindow.setContent(createInfoWindowContent(chicago, map.getZoom()));\n  coordInfoWindow.setPosition(chicago);\n  coordInfoWindow.open(map);\n  map.addListener(\"zoom_changed\", () => {\n    coordInfoWindow.setContent(createInfoWindowContent(chicago, map.getZoom()));\n    coordInfoWindow.open(map);\n  });\n}\n\nconst TILE_SIZE = 256;\n\nfunction createInfoWindowContent(latLng, zoom) {\n  const scale = 1 << zoom;\n  const worldCoordinate = project(latLng);\n  const pixelCoordinate = new google.maps.Point(Math.floor(worldCoordinate.x * scale), Math.floor(worldCoordinate.y * scale));\n  const tileCoordinate = new google.maps.Point(Math.floor(worldCoordinate.x * scale / TILE_SIZE), Math.floor(worldCoordinate.y * scale / TILE_SIZE));\n  return [\"Chicago, IL\", \"LatLng: \" + latLng, \"Zoom level: \" + zoom, \"World Coordinate: \" + worldCoordinate, \"Pixel Coordinate: \" + pixelCoordinate, \"Tile Coordinate: \" + tileCoordinate].join(\"<br>\");\n} // The mapping between latitude, longitude and pixels is defined by the web\n// mercator projection.\n\n\nfunction project(latLng) {\n  let siny = Math.sin(latLng.lat() * Math.PI / 180); // Truncating to 0.9999 effectively limits latitude to 89.189. This is\n  // about a third of a tile past the edge of the world tile.\n\n  siny = Math.min(Math.max(siny, -0.9999), 0.9999);\n  return new google.maps.Point(TILE_SIZE * (0.5 + latLng.lng() / 360), TILE_SIZE * (0.5 - Math.log((1 + siny) / (1 - siny)) / (4 * Math.PI)));\n}","map":{"version":3,"sources":["/Users/hpzhang/Desktop/Localdisk/Andy2020/JSframe/React2021/iot-reactapp/src/index.js"],"names":["React","ReactDOM","initMap","Google","chicago","google","maps","LatLng","map","Map","document","getElementById","center","zoom","coordInfoWindow","InfoWindow","setContent","createInfoWindowContent","getZoom","setPosition","open","addListener","TILE_SIZE","latLng","scale","worldCoordinate","project","pixelCoordinate","Point","Math","floor","x","y","tileCoordinate","join","siny","sin","lat","PI","min","max","lng","log"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction initMap() {\n  \n  let Google = \"Something\";\n  const chicago = new google.maps.LatLng(41.85, -87.65);\n  const map = new google.maps.Map(document.getElementById(\"map\"), {\n    center: chicago,\n    zoom: 3,\n  });\n  const coordInfoWindow = new google.maps.InfoWindow();\n  coordInfoWindow.setContent(createInfoWindowContent(chicago, map.getZoom()));\n  coordInfoWindow.setPosition(chicago);\n  coordInfoWindow.open(map);\n  map.addListener(\"zoom_changed\", () => {\n    coordInfoWindow.setContent(createInfoWindowContent(chicago, map.getZoom()));\n    coordInfoWindow.open(map);\n  });\n}\nconst TILE_SIZE = 256;\n\nfunction createInfoWindowContent(latLng, zoom) {\n  const scale = 1 << zoom;\n  const worldCoordinate = project(latLng);\n  const pixelCoordinate = new google.maps.Point(\n    Math.floor(worldCoordinate.x * scale),\n    Math.floor(worldCoordinate.y * scale)\n  );\n  const tileCoordinate = new google.maps.Point(\n    Math.floor((worldCoordinate.x * scale) / TILE_SIZE),\n    Math.floor((worldCoordinate.y * scale) / TILE_SIZE)\n  );\n  return [\n    \"Chicago, IL\",\n    \"LatLng: \" + latLng,\n    \"Zoom level: \" + zoom,\n    \"World Coordinate: \" + worldCoordinate,\n    \"Pixel Coordinate: \" + pixelCoordinate,\n    \"Tile Coordinate: \" + tileCoordinate,\n  ].join(\"<br>\");\n}\n\n// The mapping between latitude, longitude and pixels is defined by the web\n// mercator projection.\nfunction project(latLng) {\n  let siny = Math.sin((latLng.lat() * Math.PI) / 180);\n  // Truncating to 0.9999 effectively limits latitude to 89.189. This is\n  // about a third of a tile past the edge of the world tile.\n  siny = Math.min(Math.max(siny, -0.9999), 0.9999);\n  return new google.maps.Point(\n    TILE_SIZE * (0.5 + latLng.lng() / 360),\n    TILE_SIZE * (0.5 - Math.log((1 + siny) / (1 - siny)) / (4 * Math.PI))\n  );\n}\n"]},"metadata":{},"sourceType":"module"}